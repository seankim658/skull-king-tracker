services:
  # Database service (Postgres)
  db:
    image: postgres:16-alpine
    container_name: skull_king_db
    environment:
      POSTGRES_USER: ${POSTGRES_USER} # The superuser for PostgreSQL.
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD} # The password for the superuser.
      POSTGRES_DB: ${POSTGRES_DB} # The name of the database to be created on initialization.
    volumes:
      - ./db_init:/docker-entrypoint-initdb.d
      - ./postgres_data:/var/lib/postgresql/data
    ports:
      - "${HOST_DB_PORT:-5432}:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend service (Go API)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: skull_king_backend_api
    ports:
      - "${HOST_BACKEND_PORT:-8080}:${API_PORT:-8080}"
    environment:
      APP_ENV: ${APP_ENV:-development}
      API_PORT: ${API_PORT:-8080}  # Port Go app listens on inside the container
      APP_BASE_URL: ${APP_BASE_URL}
      FRONTEND_BASE_URL: ${FRONTEND_BASE_URL}
      DB_HOST: ${DB_HOST:-db}
      DB_PORT: ${DB_PORT:-5432}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      DB_SSLMODE: ${DB_SSLMODE:-disable}
      JWT_SECRET: ${JWT_SECRET}
      SESSION_SECRET_KEY: ${SESSION_SECRET_KEY}
      SESSION_ENCRYPTION_KEY: ${SESSION_ENCRYPTION_KEY}
      GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID}
      GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET}
      LOG_LEVEL: ${LOG_LEVEL:-info}
      LOG_CONSOLE_LOGGING: ${LOG_CONSOLE_LOGGING:-true}
      LOG_USE_JSON_FORMAT: ${LOG_USE_JSON_FORMAT:-false}
      APP_LOG_PATH: ${APP_LOG_PATH:-/app/logs/app.log}
      ACCESS_LOG_PATH: ${ACCESS_LOG_PATH:-/app/logs/access.log}
      LOG_MAX_SIZE_MB: ${LOG_MAX_SIZE_MB:-100}
      LOG_MAX_BACKUPS: ${LOG_MAX_BACKUPS:-5}
      LOG_MAX_AGE_DAYS: ${LOG_MAX_AGE_DAYS:-30}
      LOG_COMPRESS: ${LOG_COMPRESS:-true}
    volumes:
      - ./backend/logs:/app/logs
    depends_on:
      db:
        condition: service_healthy
    restart: unless-stopped

#  # Frontend service - to be defined later.
#  frontend:
#    build:
#      context: ./frontend
#      dockerfile: Dockerfile
#    container_name: skull_king_frontend
#    ports:
#      - "${HOST_FRONTEND_PORT:-3000}:80" # Maps host port (e.g., 3000 or from .env) to Nginx container port 80
#    environment:
#      # Example: If your React app needs to know the backend API URL
#      REACT_APP_API_URL: http://localhost:${HOST_BACKEND_PORT:-8080}/api # Or directly to backend service if proxied by Nginx
#    depends_on:
#      - backend
#    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
